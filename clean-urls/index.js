(function(exports,constants$1,metro,patcher$1,common){"use strict";var constants={github:{url:"https://github.com/nexpid/BunnyPlugins/",raw:"https://raw.githubusercontent.com/nexpid/BunnyPlugins/main/"}};metro.find(function(x){return x?.WebView&&!x.default}).WebView,metro.findByProps("SvgXml");const Joi=metro.findByProps("isJoi");metro.findByProps("useSharedValue"),metro.findByProps("FlashList").FlashList;const RNFileManager=common.ReactNative.NativeModules.DCDFileManager??common.ReactNative.NativeModules.RTNFileManager;common.ReactNative.NativeModules.BundleUpdaterManager,common.ReactNative.NativeModules.MMKVManager,common.ReactNative.NativeModules.DCDSoundManager;const RNFSManager=common.ReactNative.NativeModules.RNFSManager,normalizeFilePath=function(path){return path.startsWith("file://")?path.slice(7):path},getOptions=function(encoding){if(typeof encoding=="string"){if(["utf8","ascii","base64"].includes(encoding))return{encoding};throw new Error(`Invalid encoding type "${String(encoding)}"`)}else return encoding||{encoding:"utf8"}},readFileGeneric=function(filepath,encoding,command){const options=getOptions(encoding);return command(normalizeFilePath(filepath)).then(function(b64){let contents;return options.encoding==="utf8"?contents=Buffer.from(b64,"base64").toString("utf8"):options.encoding==="ascii"?contents=Buffer.from(b64,"base64").toString("ascii"):options.encoding==="base64"&&(contents=b64),contents})},resolveWrite=function(filepath){let write={style:null,path:null};const constants2=RNFileManager.getConstants();if(filepath.startsWith(constants2.DocumentsDirPath))write={style:"documents",path:filepath.slice(constants2.DocumentsDirPath.length+1)};else if(filepath.startsWith(constants2.CacheDirPath))write={style:"cache",path:filepath.slice(constants2.CacheDirPath.length+1)};else throw new Error(`File path "${String(filepath)}" is unsupported on versions <211.6 (not a caches/documents path, missing RNFS)`);return write},RNFS={unlink(filepath){if(RNFSManager)return RNFSManager.unlink(normalizeFilePath(filepath)).then(function(){});const write=resolveWrite(filepath);return RNFileManager.removeFile(write.style,write.path).then(function(){})},exists(filepath){return RNFSManager?RNFSManager.exists(normalizeFilePath(filepath)):RNFileManager.fileExists(normalizeFilePath(filepath))},readFile(filepath,encoding){if(RNFSManager)return readFileGeneric(filepath,encoding,RNFSManager.readFile);{const options=getOptions(encoding);if(options.encoding==="ascii")throw new Error('Encoding type "ascii" is unsupported on versions <211.6 (missing RNFS)');return RNFileManager.readFile(filepath,options.encoding)}},writeFile(filepath,contents,encoding){const options=getOptions(encoding);if(!RNFSManager){if(options.encoding==="ascii")throw new Error('Encoding type "ascii" is unsupported on versions <211.6 (missing RNFS)');const write=resolveWrite(filepath);return RNFileManager.writeFile(write.style,write.path,contents,options.encoding).then(function(){})}let b64;return options.encoding==="utf8"?b64=Buffer.from(contents,"utf8").toString("base64"):options.encoding==="ascii"?b64=Buffer.from(contents,"ascii").toString("base64"):options.encoding==="base64"&&(b64=contents),RNFSManager.writeFile(normalizeFilePath(filepath),b64,options)},mkdir(filepath){if(!RNFSManager)throw new Error("Function 'mkdir' is unsupported on versions <211.6 (missing RNFS)");return RNFSManager.mkdir(normalizeFilePath(filepath),{}).then(function(){})},MainBundlePath:RNFSManager?.RNFSMainBundlePath,get CachesDirectoryPath(){return RNFSManager?.RNFSCachesDirectoryPath??RNFileManager.getConstants().CacheDirPath},ExternalCachesDirectoryPath:RNFSManager?.RNFSExternalCachesDirectoryPath,get DocumentDirectoryPath(){return RNFSManager?.RNFSDocumentDirectoryPath??RNFileManager.getConstants().DocumentsDirPath},DownloadDirectoryPath:RNFSManager?.RNFSDownloadDirectoryPath,ExternalDirectoryPath:RNFSManager?.RNFSExternalDirectoryPath,ExternalStorageDirectoryPath:RNFSManager?.RNFSExternalStorageDirectoryPath,TemporaryDirectoryPath:RNFSManager?.RNFSTemporaryDirectoryPath,LibraryDirectoryPath:RNFSManager?.RNFSLibraryDirectoryPath,PicturesDirectoryPath:RNFSManager?.RNFSPicturesDirectoryPath,FileProtectionKeys:RNFSManager?.RNFSFileProtectionKeys,RoamingDirectoryPath:RNFSManager?.RNFSRoamingDirectoryPath,hasRNFS:!!RNFSManager},make=function(){return RNFS.hasRNFS&&RNFS.mkdir(`${RNFS.DocumentDirectoryPath}/vendetta/CleanURLs`)},filePath=function(){return`${RNFS.DocumentDirectoryPath}/vendetta/CleanURLs/list.json`},etagPath=function(){return`${RNFS.DocumentDirectoryPath}/vendetta/CleanURLs/list_etag.txt`},Rules=Joi.object({main:[Joi.string()],extended:[Joi.string()]});let cachedRules;const parseRules=function(rules){if(Rules.validate(rules).error)throw new Error(":(");const reEscaper=/[\\^$.*+?()[\]{}|]/g,reEscape=function(str){return str.replace(reEscaper,"\\$&")},universal=new Array,byHost={},hostMap={};for(const mrule of[...rules.main,...rules.extended]){const[rule,host]=mrule.split("@"),reRule=new RegExp(`^${reEscape(rule).replace(/\*/g,".+?")}$`);if(!host){universal.push(reRule);continue}const reHost=new RegExp(`^(?:www\\.)?${reEscape(host).replace(/\*\./g,"(?:.+?\\.)?").replace(/\*/g,".+?")}$`),reHostStr=reHost.toString();hostMap[reHostStr]=reHost,byHost[reHostStr]??(byHost[reHostStr]=[]),byHost[reHostStr].push(reRule)}return{universal,byHost,hostMap}},fetchRules=async function(){const read=async function(){if(await RNFS.exists(filePath()))try{cachedRules=parseRules(JSON.parse(await RNFS.readFile(filePath())))}catch{}};{const res=await fetch(listUrl,{headers:{"cache-control":"public; max-age=20"}});if(!res.ok)return read();make();const lastEtag=await RNFS.exists(etagPath())&&await RNFS.readFile(etagPath()),newEtag=res.headers.get("etag");if(!newEtag)return read();if(newEtag!==lastEtag){RNFS.writeFile(etagPath(),newEtag);const txt=await res.text();RNFS.writeFile(filePath(),txt);try{cachedRules=parseRules(JSON.parse(txt))}catch{return}}else read()}};function getRules(){return fetchRules(),cachedRules??{universal:[],byHost:{},hostMap:{}}}const Messages=metro.findByProps("sendMessage","editMessage"),clean=function(text){return text.replace(constants$1.HTTP_REGEX_MULTI,function(str){var _Object_entries_find;let url;try{url=new URL(str)}catch{return str}const rules=getRules(),host=((_Object_entries_find=Object.entries(rules.byHost).find(function(x){var _rules_hostMap_x_;return(_rules_hostMap_x_=rules.hostMap[x[0]])===null||_rules_hostMap_x_===void 0?void 0:_rules_hostMap_x_.test(url.hostname)}))===null||_Object_entries_find===void 0?void 0:_Object_entries_find[1])??[];for(const r of[...rules.universal,...host])url.searchParams.forEach(function(_,key){return r.test(key)&&url.searchParams.delete(key)});return url.toString()})},handleMessage=function(msg){msg.content=clean(msg.content)};function patcher(){const patches=new Array;return patcher$1.before("sendMessage",Messages,function(args){return handleMessage(args[1])}),patcher$1.before("editMessage",Messages,function(args){return handleMessage(args[2])}),getRules(),function(){return patches.forEach(function(x){return x()})}}const listUrl=`${constants.github.raw}plugins/clean-urls/assets/list.json`;let unpatch;var index={onLoad:function(){return unpatch=patcher()},onUnload:function(){return unpatch?.()}};return exports.default=index,exports.listUrl=listUrl,Object.defineProperty(exports,"__esModule",{value:!0}),exports})({},vendetta.constants,vendetta.metro,vendetta.patcher,vendetta.metro.common);
